import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
import re

class RecipeProfileManager:
    def __init__(self, filename: str = "recipe_preferences.json"):
        # Use profile file in current working directory for persistence
        self.filename = filename
        self.profile = self._load_profile()
        # Ensure file exists after initialization
        self.save_profile()

    def _load_profile(self) -> Dict[str, Any]:
        """Load or create initial profile"""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                print(f"Warning: Invalid JSON in {self.filename}, creating new profile")
                return {
                    "seasonal_preferences": {},
                    "favorite_recipes": [],
                    "past_interactions": []
                }
        else:
            print(f"Creating new profile file: {self.filename}")
            return {
                "seasonal_preferences": {},
                "favorite_recipes": [],
                "past_interactions": []
            }

    # Detect whether a message is only querying the current favorite(s)
    @staticmethod
    def _is_favorite_query(message: str) -> bool:
        """
        Return True when the user is *asking* about their favourite, NOT declaring one.
        We treat it as a query if it contains typical question phrases near
        the word "favorite" – even when the user forgets a question mark.
        """
        lowered = message.lower()
        # Quick check to avoid unnecessary regex work
        if "favorite" not in lowered:
            return False

        # If the message ends with a question-mark *and* mentions “favorite”, assume it’s a query
        if lowered.rstrip().endswith("?"):
            return True

        # Otherwise look for common interrogative phrases occurring
        # within 50 characters before the word “favorite”
        return bool(
            re.search(
                r"(?:\bwhat\b|\bwhich\b|\btell me\b|\bshow me\b|\bdo you know\b|\bremember\b|\bknow\b)"
                r".{0,50}?\bfavorite\b",
                lowered,
            )
        )

    def save_profile(self) -> None:
        """Save profile to JSON file"""
        try:
            with open(self.filename, 'w') as f:
                json.dump(self.profile, f, indent=4)
        except IOError as e:
            print(f"Error saving profile: {e}")

    def update_seasonal_preferences(self, season: str, preferences: List[str]) -> None:
        """Update seasonal ingredient preferences"""
        self.profile["seasonal_preferences"][season] = preferences
        self.save_profile()

    def add_favorite_recipe(self, recipe_name: str, season: str = None) -> None:
        """Add or update a favorite recipe"""
        current_date = datetime.now().isoformat()
        # Remove old entry if exists
        self.profile["favorite_recipes"] = [
            fav for fav in self.profile["favorite_recipes"]
            if fav["recipe_name"] != recipe_name
        ]
        self.profile["favorite_recipes"].append({
            "recipe_name": recipe_name,
            "added_date": current_date,
            "season": season
        })
        self.save_profile()

    def get_context(self) -> Dict[str, Any]:
        """Prepare context for API calls"""
        current_date = datetime.now()
        month = current_date.month
        # Determine current season
        current_season = {
            (12, 1, 2): "winter",
            (3, 4, 5): "spring",
            (6, 7, 8): "summer",
            (9, 10, 11): "fall"
        }[next(s for s in [(12, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11)] if month in s)]
        
        # Ensure up to 5 most recent favorites are included
        recent_favorites = self.profile["favorite_recipes"][-5:] if self.profile["favorite_recipes"] else []
        
        # Extract the most frequently mentioned favorites from past interactions
        favorite_mentions = {}
        for interaction in self.profile["past_interactions"][-20:]:  # Only analyze recent interactions
            if "extracted_preferences" in interaction and "favorite_recipe" in interaction["extracted_preferences"]:
                recipe = interaction["extracted_preferences"]["favorite_recipe"]
                favorite_mentions[recipe] = favorite_mentions.get(recipe, 0) + 1
        
        # Find top mentioned favorites
        top_favorites = sorted(favorite_mentions.items(), key=lambda x: x[1], reverse=True)[:3]
        top_favorites_names = [item[0] for item in top_favorites]
        
        return {
            "seasonal_preferences": self.profile["seasonal_preferences"],
            "favorite_recipes": recent_favorites,
            "current_season": current_season,
            "top_mentioned_favorites": top_favorites_names,
            "last_interaction_date": current_date.isoformat()
        }

class RecipeAssistant:
    def __init__(self, api_key: str):
        from openai import OpenAI
        self.client = OpenAI(api_key=api_key)
        self.profile_manager = RecipeProfileManager()

    def _get_system_prompt(self) -> str:
        """Generate consistent system prompt"""
        return """
        You are a knowledgeable recipe assistant who remembers users' preferences across sessions.
        Key behaviors:
        1. You maintain seasonal ingredient preferences and favorite recipes even when the app is restarted
        2. You adapt recommendations based on user's tastes and preferences from past interactions
        3. You recognize when users share new favorites or preferences and acknowledge the changes
        4. You pay special attention to dietary restrictions, allergies, and health considerations
        5. You consider the current season when making recommendations
        6. You always acknowledge when a user mentions a new favorite dish or recipe
        7. You're sensitive to changes in preference over time
        
        When the user mentions they love a particular dish or recipe, respond by acknowledging it as their new favorite.
        """

    def _extract_preferences_from_message(self, message: str) -> Dict[str, Any]:
        """Extract preferences from user messages"""
        # If the user is simply asking about their favourite, do not extract anything
        if RecipeProfileManager._is_favorite_query(message):
            return {}

        preferences = {}
        message_lower = message.lower()
        
        # Extract seasonal preferences
        season_match = re.search(r"(?:for|in|during)\s*(spring|summer|autumn|fall|winter)", message_lower)
        if season_match:
            season = season_match.group(1)
            # Look for ingredients mentioned after like/prefer/enjoy
            ingredient_match = re.findall(r"(?:like|prefer|enjoy)\s+(.+?)(?:\s*,|\s*and|\s*$)", message_lower)
            if ingredient_match:
                ingredients = []
                for match in ingredient_match:
                    ingredients.extend([i.strip() for i in re.split(r'\s*,\s*|\s+and\s+', match)])
                preferences["seasonal_ingredients"] = ingredients
                preferences["season"] = season
        
        # Extract favorite recipes (more comprehensive patterns)
        favorite_patterns = [
            # Pattern for declarations like 'X is my new favorite'
            r"\b(.+?)\s+is my (?:new\s+)?favorite",
            r"\bmy favorite (?:recipe|dish|meal) is\s+([^.,!?]+)",
            r"\bi love\s+([^.,!?]+)",
            r"\bi really (?:like|enjoy|prefer)\s+([^.,!?]+)",
            r"\b(?:the|a|an)?\s*([^.,!?]+?)\s+is my (?:new\s+)?favorite"
        ]
        
        for pattern in favorite_patterns:
            match = re.search(pattern, message_lower)
            if match:
                recipe_name = match.group(1).strip()
                # Remove filler words
                recipe_name = re.sub(r'^(?:the|a|an)\s+', '', recipe_name)
                preferences["favorite_recipe"] = recipe_name
                break
                
        return preferences

    def chat(self, user_message: str) -> str:
        """Handle user interaction and maintain profile"""
        # Quick path: if the user is only querying favourites, answer directly
        if RecipeProfileManager._is_favorite_query(user_message):
            favs = self.profile_manager.profile.get("favorite_recipes", [])
            if favs:
                current_fav = favs[-1]["recipe_name"]
                return f'Your current favorite recipe is "{current_fav}". If that has changed, just let me know!'
            else:
                return "You haven’t told me any favorite recipes yet. Feel free to share one!"

        # Extract current date and season
        current_date = datetime.now()
        month = current_date.month
        # Determine current season
        current_season = {
            (12, 1, 2): "winter",
            (3, 4, 5): "spring",
            (6, 7, 8): "summer",
            (9, 10, 11): "fall"
        }[next(s for s in [(12, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11)] if month in s)]
        
        # Update profile based on message content
        preferences = self._extract_preferences_from_message(user_message)
        if "seasonal_ingredients" in preferences:
            self.profile_manager.update_seasonal_preferences(
                preferences.get("season", current_season), preferences["seasonal_ingredients"])
            print(f"Updated seasonal preferences for {preferences.get('season', current_season)}")
            
        if "favorite_recipe" in preferences:
            # Use extracted season or current season
            season = preferences.get("season", current_season)
            self.profile_manager.add_favorite_recipe(
                preferences["favorite_recipe"], season)
            print(f"Added '{preferences['favorite_recipe']}' to your favorites")

        # Get relevant context
        context = self.profile_manager.get_context()
        
        # Make context relevant to current season when possible
        seasonal_context = {}
        if current_season in context['seasonal_preferences']:
            seasonal_context['current_season_preferences'] = {
                'season': current_season,
                'ingredients': context['seasonal_preferences'][current_season]
            }
            
        # Filter favorite recipes by current season when available
        seasonal_favorites = [fav for fav in context['favorite_recipes'] 
                             if fav.get('season') == current_season]
        
        # Use seasonal favorites if available, otherwise use all recent favorites
        display_favorites = seasonal_favorites if seasonal_favorites else context['favorite_recipes'][-3:]
        
        # Structure API messages in a conversational format
        messages = [
            {"role": "system", "content": self._get_system_prompt()},
            {"role": "user", "content": f"""My current preferences:
                - Current season: {current_season}
                - Seasonal ingredients I enjoy: {seasonal_context.get('current_season_preferences', {}).get('ingredients', [])}
                - My recent favorite recipes: {[fav['recipe_name'] for fav in display_favorites]}
                
                My question: {user_message}"""}
        ]

        # Make API call with better structured messages
        response = self.client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7,
            max_tokens=500
        )

        # Extract content from response
        response_content = response.choices[0].message.content
        
        # Update interaction history with more metadata
        self.profile_manager.profile["past_interactions"].append({
            "message": user_message,
            "response": response_content,
            "extracted_preferences": preferences,
            "timestamp": current_date.isoformat(),
            "season": current_season
        })
        self.profile_manager.save_profile()
        return response_content

def main():
    # Get API key from environment variable or use provided key
    api_key = os.environ.get("OPENAI_API_KEY", "") 
    
    # If no API key in environment, use the one in the code (not recommended for production)
    if not api_key:
        api_key = "INSERT API KEY")
    
    if not api_key:
        raise ValueError("Please set OPENAI_API_KEY environment variable or provide a key")
    
    assistant = RecipeAssistant(api_key)
    
    # Show user's current favorites on startup
    profile_mgr = assistant.profile_manager
    current_date = datetime.now()
    month = current_date.month
    current_season = {
        (12, 1, 2): "winter",
        (3, 4, 5): "spring",
        (6, 7, 8): "summer",
        (9, 10, 11): "fall"
    }[next(s for s in [(12, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11)] if month in s)]
    
    print("Recipe Assistant initialized. Type 'exit' to quit.")
    print(f"\nCurrent season: {current_season.capitalize()}")
    
    if profile_mgr.profile["favorite_recipes"]:
        recent_favs = profile_mgr.profile["favorite_recipes"][-3:]
        print("Your recent favorite recipes:")
        for fav in reversed(recent_favs):
            print(f" - {fav['recipe_name']} (Added: {fav['added_date'][:10]})")
    else:
        print("You haven't saved any favorite recipes yet.")
    print("\nTell me about your favorite recipes or ask for recommendations!")
    
    while True:
        user_input = input("\nYou: ")
        if user_input.lower() == 'exit':
            break
            
        # Special commands
        if user_input.lower() == "show my favorites":
            favorites = profile_mgr.profile["favorite_recipes"]
            if favorites:
                print("\nYour favorite recipes:")
                for fav in reversed(favorites[-10:]):  # Show last 10 favorites
                    season_info = f" ({fav['season']})" if fav['season'] else ""
                    print(f" - {fav['recipe_name']}{season_info} (Added: {fav['added_date'][:10]})")
            else:
                print("\nYou haven't saved any favorite recipes yet.")
            continue
            
        response = assistant.chat(user_input)
        print("\nAssistant:", response)

if __name__ == "__main__":
    main()
